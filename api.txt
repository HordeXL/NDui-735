# NDui 插件 API 接口汇总

## 核心框架 API

### NDui 主框架
- `NDui:RegisterModule(name)` - 注册模块
- `NDui:GetModule(name)` - 获取模块
- `NDui:EventFrame(events)` - 创建事件框架

### 模块生命周期回调
- `module:OnLogin()` - 登录时执行
- `module:OnInit()` - 初始化时执行
- `module:OnShow()` - 显示时执行
- `module:OnHide()` - 隐藏时执行
- `module:OnEvent(event, ...)` - 事件处理

## UI 创建工具 API (B 命名空间)

### 基础元素创建
- `B.CreateGF(f, w, h, o, r, g, b, a1, a2)` - 创建渐变框架
- `B.CreateBD(f, a, s)` - 创建背景
- `B.CreateSD(f, m, s)` - 创建阴影
- `B.CreateBG(f, m)` - 创建背景框架
- `B.CreateTex(f)` - 创建纹理
- `B.CreateFS(f, size, text, classcolor, anchor, x, y)` - 创建字体字符串

### 交互元素创建
- `B.CreateButton(parent, width, height, text, fontSize)` - 创建按钮
- `B.CreateCheckBox(parent)` - 创建复选框
- `B.CreateEditBox(parent, width, height)` - 创建编辑框
- `B.CreateDropDown(parent, width, height, data)` - 创建下拉菜单

### 功能性元素
- `B.CreateGT(f, anchor, text, color)` - 创建游戏提示
- `B.CreateAT(f, anchor, value)` - 创建光环提示
- `B.CreateBC(f, a)` - 创建按钮颜色
- `B.CreateCB(f, a)` - 创建复选框样式
- `B.CreateMF(f, parent)` - 创建可移动框架
- `B.CreateIF(f, HL)` - 创建图标框架
- `B.CreateSB(f, spark, r, g, b)` - 创建状态条

### 工具函数
- `B.Numb(n)` - 数字格式化
- `B.HexRGB(r, g, b)` - RGB转十六进制
- `B.ClassColor(class)` - 获取职业颜色
- `B.UnitColor(unit)` - 获取单位颜色
- `B.SmoothBar(bar)` - 平滑状态条
- `B.UnitInGuild(unit)` - 检查是否同公会
- `B.FormatTime(s)` - 时间格式化
- `B.CopyTable(source, target)` - 表拷贝
- `B.Dummy()` - 空函数

## 单位框架 API (UF 模块)

### 框架创建
- `UF:CreateHeader(self)` - 创建框架头部
- `UF:CreateHealthBar(self)` - 创建生命值条
- `UF:CreateHealthText(self)` - 创建生命值文本
- `UF:CreatePowerBar(self)` - 创建能量条
- `UF:CreatePowerText(self)` - 创建能量文本
- `UF:CreatePortrait(self)` - 创建头像
- `UF:CreateIcons(self)` - 创建图标
- `UF:CreatePrediction(self)` - 创建预测显示

## 模块特定 API

### 背包模块 (Bags)
- `module:OnLogin()` - 背包模块初始化
- `Backpack:OnBankOpened()` - 银行打开回调
- `Backpack:OnBankClosed()` - 银行关闭回调
- `MyButton:OnCreate()` - 按钮创建回调
- `MyButton:OnUpdate(item)` - 按钮更新回调
- `MyContainer:OnContentsChanged()` - 容器内容变更回调
- `MyContainer:OnCreate(name, settings)` - 容器创建回调

### 聊天模块 (Chat)
- `module:OnLogin()` - 聊天模块初始化
- `module:ChatFilter()` - 聊天过滤
- `module:ChannelRename()` - 频道重命名
- `module:Chatbar()` - 聊天栏
- `module:ChatCopy()` - 聊天复制
- `module:UrlCopy()` - URL复制

### 信息栏模块 (Infobar)
- `module:RegisterInfobar(point)` - 注册信息栏
- `module:LoadInfobar(info)` - 加载信息栏
- `info.onEvent` - 事件处理回调
- `info.onEnter` - 鼠标进入回调
- `info.onLeave` - 鼠标离开回调
- `info.onMouseUp` - 鼠标点击回调
- `info.onUpdate` - 更新回调

### 光环表模块 (AurasTable)
- `module:AddNewAuraWatch(class, list)` - 添加新光环监视
- `module:AddClassSpells(list)` - 添加职业法术
- `module:RegisterDebuff(_, instID, _, spellID, level)` - 注册Debuff

## 斜杠命令 API

### 核心命令
- `/ndui` - 打开主界面
- `/rl` - 重载界面
- `/hb` - 快捷键绑定

### 开发工具命令
- `/nt` - 枚举提示
- `/nf` - 枚举框架
- `/ns` - 转储法术
- `/getid` - 获取副本ID
- `/getnpc` - 获取NPC ID
- `/nff` - 获取字体
- `/ndev` - 开发者模式

### 功能性命令
- `/arc` - 神器能量计算器
- `/kro` - 射线工具
- `/groll` - 金币抽奖（中文客户端）

## 事件处理 API

### 事件注册
- `frame:RegisterEvent(event, func, unitless)` - 注册事件
- `Implementation:RegisterEvent(event, key, func)` - 实现事件注册
- `frame:UnregisterEvent(event, func)` - 取消事件注册

### 常用事件
- `PLAYER_LOGIN` - 玩家登录
- `ADDON_LOADED` - 插件加载
- `BAG_UPDATE` - 背包更新
- `UNIT_HEALTH` - 单位生命值
- `UNIT_POWER_UPDATE` - 单位能量更新
- `CHAT_MSG_WHISPER` - 密语消息
- `READY_CHECK` - 就绪检查
- `ACHIEVEMENT_EARNED` - 成就获得

## oUF 框架 API

### 基础功能
- `oUF:RegisterInitCallback(func)` - 注册初始化回调
- `oUF:RegisterMetaFunction(name, func)` - 注册元函数
- `oUF:Factory(func)` - 工厂函数
- `oUF:EnableFactory()` - 启用工厂
- `oUF:DisableFactory()` - 禁用工厂
- `oUF:RunFactoryQueue()` - 运行工厂队列

### 单位框架
- `frame:RegisterEvent(event, func, unitless)` - 单位事件注册
- `frame:UnregisterEvent(event, func)` - 单位事件取消
- `frame:UpdateAllElements(event)` - 更新所有元素

## cargBags 框架 API

### 实现类 (Implementation)
- `Implementation:New(name)` - 创建新实现
- `Implementation:Init()` - 初始化实现
- `Implementation:RegisterBlizzard()` - 注册暴雪替换
- `Implementation:RegisterEvent(event, key, func)` - 注册事件
- `Implementation:IsEventRegistered(event, key)` - 检查事件注册
- `Implementation:OnEvent(event, ...)` - 事件处理
- `Implementation:GetButton(bagID, slotID)` - 获取按钮
- `Implementation:AtBank()` - 是否在银行

### 容器类 (Container)
- `Container:AddButton(button)` - 添加按钮
- `Container:RemoveButton(button)` - 移除按钮
- `Container:ScheduleContentCallback()` - 调度内容回调
- `Container:ApplyToButtons(func, ...)` - 应用到按钮
- `Container:SetBags(bags)` - 设置背包
- `Container:LayoutButtons(layout, ...)` - 布局按钮

### 按钮类 (ItemButton)
- `button:OnCreate()` - 创建回调
- `button:OnUpdate()` - 更新回调
- `button:OnAdd(container)` - 添加到容器回调
- `button:OnRemove(container)` - 从容器移除回调

## 钩子函数 API (hooksecurefunc)

### 动作条钩子
- `hooksecurefunc("ActionButton_OnUpdate", func)`
- `hooksecurefunc("ActionButton_Update", func)`
- `hooksecurefunc("ActionBarButtonEventsFrame_RegisterFrame", func)`
- `hooksecurefunc("ActionButton_UpdateHotkeys", func)`

### 光环钩子
- `hooksecurefunc("BuffFrame_UpdateAllBuffAnchors", func)`
- `hooksecurefunc("TemporaryEnchantFrame_Update", func)`
- `hooksecurefunc("DebuffButton_UpdateAnchors", func)`
- `hooksecurefunc("AuraButton_Update", func)`
- `hooksecurefunc("AuraButton_UpdateDuration", func)`

### 聊天钩子
- `hooksecurefunc("FCF_OpenTemporaryWindow", func)`
- `hooksecurefunc("FCFTab_UpdateColors", func)`
- `hooksecurefunc("ChatEdit_CustomTabPressed", func)`
- `hooksecurefunc("FloatingChatFrame_OnMouseScroll", func)`

### 其他钩子
- `hooksecurefunc("MultiActionBar_UpdateGridVisibility", func)`
- `hooksecurefunc("GarrisonLandingPageMinimapButton_UpdateIcon", func)`
- `hooksecurefunc("QueueStatusFrame_Update", func)`
- `hooksecurefunc("AuctionFrameBrowse_Update", func)`

## 配置和设置 API

### 数据库访问
- `NDuiDB[module][setting]` - 访问设置
- `NDuiADB[key]` - 访问账户数据

### 默认设置
- 详细的默认设置在 `Core/GUI.lua` 中定义
- 包括动作条、背包、光环、单位框架、聊天、地图、姓名板、皮肤、提示框、杂项等模块设置

## 插件兼容性 API

### 支持的插件
- DBM (Deadly Boss Mods)
- BigWigs
- Skada
- WeakAuras
- TMW (TellMeWhen)
- RCLC (Rotation Cooldown)

### 皮肤和样式
- 自动皮肤化支持的插件
- 提供一致的视觉风格
- 字体和颜色主题统一

## 本地化 API

### 语言支持
- `L[key]` - 获取本地化文本
- 支持 enUS、zhCN、zhTW

### 本地化文件
- `Locales/enUS.lua`
- `Locales/zhCN.lua`
- `Locales/zhTW.lua`

## 工具和实用函数

### 颜色工具
- `DB.MyColor` - 主题颜色
- `DB.cc` - 职业颜色
- `BAG_ITEM_QUALITY_COLORS` - 物品品质颜色

### 纹理和材质
- `DB.normTex` - 标准纹理
- `DB.bdTex` - 边框纹理
- `DB.glowTex` - 发光纹理
- `DB.sparkTex` - 闪光纹理

### 字体设置
- `DB.Font` - 标准字体
- `C.Infobar.Fonts` - 信息栏字体

## 错误处理和调试

### 错误消息过滤
- 战斗中隐藏特定错误消息
- 可配置的错误过滤列表

### 调试工具
- 开发者命令集
- 框架检查工具
- 法术和物品信息转储

## 兼容性和依赖

### 魔兽世界版本
- 支持 7.3.0 版本接口
- 与暴雪界面 API 兼容

### 第三方库
- oUF (单位框架库)
- cargBags (背包库)
- 各种实用工具库

---

注意：此API列表基于NDui 2.16.0版本，某些功能可能在不同版本中有所变化。
建议查看具体模块的源代码文件以获取最新和详细的API信息。